# docker-compose.yml (Versão para Deploy)
version: '3.8'

services:
  api:
    build: . # Constrói a imagem usando o Dockerfile no diretório atual
    container_name: transporte_api_prod # Nome para produção
    ports:
      - "8000:8000"
    
    # NÃO há 'volumes' para o código aqui, pois ele já está dentro da imagem.
    # NÃO há 'command' aqui, para que ele use o 'CMD' do Dockerfile.
    
    # As variáveis virão da interface do Portainer, mas env_file pode ser um fallback
    env_file:
      - ./.env 
    
    depends_on:
      db:
        condition: service_healthy # Espera o banco estar saudável antes de iniciar
  
  db:
    image: postgres:14-alpine
    container_name: transporte_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    
    # Não é estritamente necessário expor a porta do banco para o mundo exterior
    # em produção, a menos que você precise acessá-la de fora da rede Docker.
    # ports:
    #   - "5433:5432"

    environment:
      # Lembre-se: estes valores serão definidos no Portainer,
      # não lidos do .env que está no Git.
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_prod: